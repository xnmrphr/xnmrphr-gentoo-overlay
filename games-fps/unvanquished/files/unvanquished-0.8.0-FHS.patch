From 071ad19ac9c869c96fa42bd67ebd98c308f7635e Mon Sep 17 00:00:00 2001
From: Darren Salt <devspam@moreofthesa.me.uk>
Date: Mon, 8 Oct 2012 04:29:57 +0100
Subject: [PATCH] Check in fs_libpath as well as fs_basepath for the renderer
 code.

29a44f3 broke things for my .debs.
This puts that right while retaining the intent.
---
 src/engine/client/cl_main.c |   67 +++++++++++++++++++++++++++----------------
 src/engine/client/client.h  |    2 +-
 2 files changed, 44 insertions(+), 25 deletions(-)

diff --git a/src/engine/client/cl_main.c b/src/engine/client/cl_main.c
index a32b36a..6a12854 100644
--- a/src/engine/client/cl_main.c
+++ b/src/engine/client/cl_main.c
@@ -4035,6 +4035,8 @@ void CL_StartHunkUsers( void )
 		char renderers[ MAX_QPATH ];
 		char *from, *to;
 
+		Com_Printf("%s", _( "----- Initializing Renderer ----\n" ));
+
 		Q_strncpyz( renderers, cl_renderer->string, sizeof( renderers ) );
 		from = renderers;
 
@@ -4047,9 +4049,7 @@ void CL_StartHunkUsers( void )
 				*to++ = '\0';
 			}
 
-			CL_InitRef( from );
-
-			if ( CL_InitRenderer() )
+			if ( CL_InitRef( from ) && CL_InitRenderer() )
 			{
 				cls.rendererStarted = qtrue;
 				break;
@@ -4058,6 +4058,19 @@ void CL_StartHunkUsers( void )
 			CL_ShutdownRef();
 			from = to;
 		}
+
+		if ( !cls.rendererStarted && CL_InitRef( "GL" ) && CL_InitRenderer() )
+		{
+			cls.rendererStarted = qtrue;
+		}
+
+		if ( !cls.rendererStarted )
+		{
+			CL_ShutdownRef();
+			Com_Error( ERR_FATAL, "Couldn't load a renderer" );
+		}
+
+		Com_Printf( "-------------------------------\n" );
 	}
 	else if ( !cls.rendererStarted )
 	{
@@ -4132,48 +4145,51 @@ int CL_ScaledMilliseconds( void )
 RB: changed to load the renderer from a .dll
 ============
 */
-void CL_InitRef( const char *renderer )
+qboolean CL_InitRef( const char *renderer )
 {
 	refimport_t ri;
 	refexport_t *ret;
+	void        *lib = NULL;
 
 #if !defined( REF_HARD_LINKED )
 	GetRefAPI_t GetRefAPI;
 	char        dllName[ MAX_OSPATH ];
+	const char  varName[][16] = { "fs_libpath", "fs_basepath" };
+	int         i;
 #endif
 
-	Com_Printf("%s", _( "----- Initializing Renderer ----\n" ));
-
 #if !defined( REF_HARD_LINKED )
-
-	Com_sprintf( dllName, sizeof( dllName ), "%s/" DLL_PREFIX "renderer%s" ARCH_STRING DLL_EXT, Cvar_VariableString( "fs_basepath" ), renderer );
-
-	Com_Printf(_( "Loading \"%s\"…"), dllName );
-
-	if ( ( rendererLib = Sys_LoadLibrary( dllName ) ) == 0 )
+	for ( i = 0; i < ARRAY_LEN( varName ); ++i )
 	{
-		Com_Printf(_( "failed:\n\"%s\"\n"), Sys_LibraryError() );
-
-		//fall back to default
-		Com_sprintf( dllName, sizeof( dllName ), "%s/" DLL_PREFIX "rendererGL" ARCH_STRING DLL_EXT, Cvar_VariableString( "fs_basepath" ) );
+		Com_sprintf( dllName, sizeof( dllName ), "%s/" DLL_PREFIX "renderer%s" ARCH_STRING DLL_EXT, Cvar_VariableString( varName[ i ] ), renderer );
 
 		Com_Printf(_( "Loading \"%s\"…"), dllName );
 
-		if ( ( rendererLib = Sys_LoadLibrary( dllName ) ) == 0 )
+		lib = Sys_LoadLibrary( dllName );
+
+		if ( lib )
 		{
-			Com_Error( ERR_FATAL, "failed:\n\"%s\"", Sys_LibraryError() );
+			break;
 		}
+
+		Com_Printf(_( "failed:\n\"%s\"\n"), Sys_LibraryError() );
+	}
+
+	if ( !lib )
+	{
+		return qfalse;
 	}
 
 	Com_Printf("%s", _( "done\n" ));
 
-	GetRefAPI = Sys_LoadFunction( rendererLib, "GetRefAPI" );
+	GetRefAPI = Sys_LoadFunction( lib, "GetRefAPI" );
 
 	if ( !GetRefAPI )
 	{
-		Com_Error( ERR_FATAL, "Can't load symbol GetRefAPI: '%s'",  Sys_LibraryError() );
+		Com_Printf( "Can't load symbol GetRefAPI: '%s'",  Sys_LibraryError() );
+		Sys_UnloadDll( lib );
+		return qfalse;
 	}
-
 #endif
 
 	ri.Cmd_AddCommand = Cmd_AddCommand;
@@ -4252,17 +4268,20 @@ void CL_InitRef( const char *renderer )
 	Com_Printf("%s", _( "Calling GetRefAPI…\n" ));
 	ret = GetRefAPI( REF_API_VERSION, &ri );
 
-	Com_Printf( "-------------------------------\n" );
-
 	if ( !ret )
 	{
-		Com_Error( ERR_FATAL, "Couldn't initialize refresh" );
+		Com_Printf( "Couldn't initialize refresh\n" );
+		Sys_UnloadDll( lib );
+		return qfalse;
 	}
 
 	re = *ret;
 
 	// unpause so the cgame definitely gets a snapshot and renders a frame
 	Cvar_Set( "cl_paused", "0" );
+
+	rendererLib = lib; // at this point, we pass on unloading responsibility
+	return qtrue;
 }
 
 /*
diff --git a/src/engine/client/client.h b/src/engine/client/client.h
index 190d0cd..4d187fc 100644
--- a/src/engine/client/client.h
+++ b/src/engine/client/client.h
@@ -564,7 +564,7 @@ This file is part of the Daemon GPL Source Code (Daemon Source Code).
 int         CL_GetPingQueueCount( void );
 
 void        CL_ShutdownRef( void );
-void        CL_InitRef( const char *renderer );
+qboolean    CL_InitRef( const char *renderer );
 
 int         CL_ServerStatus( char *serverAddress, char *serverStatusString, int maxLen );
 
-- 
1.7.10
